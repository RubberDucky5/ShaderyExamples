#define NUM_OBJECTS 10
#define NUM_EMITTER 1
#define DIFF 0
#define REFL 1
#define EMIT 2
#define REFR 3

#define MAX_DIST 1000
#define MAX_STEPS 100
#define SURF_DIST 0.001

#define SAMPLES 3
#define BOUNCES 3

#define PI 3.1415926

#define fov 1.2

float seed = 0.;

struct Sphere {
    vec3 pos, col;
    float r, e;
    int mat;
};

Sphere spheres[NUM_OBJECTS];

void initrand(vec2 p) {
    p = mod(p * 74.65, 1.);
    float s = sin(p.x * 342.324 * p.y * 792.833)*6524.4324;
    seed = s;
}

float rand(){
    seed += fract(sin(seed * 0.54667) * 7673.6344);
    return fract(sin(seed * 0.45234) * 6783.2674);
}
vec3 randsphere () {
    float phi = (rand()-0.5) * PI * 2.;
    float theta = (rand()-0.5) * PI * 2.;
    
    return vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
}

vec3 randhemisphere (vec3 n) {
    float phi = (rand()-0.5) * PI * 2.;
    float theta = (rand()-0.5) * PI * 2.;
    
    vec3 vec = vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    return dot(vec, n) < 0. ? vec*-1. : vec;
}

mat2 rot (float a) {
    float s = sin(a);
    float c = cos(a);
    return mat2(c, -s, s, c);
}

void initspheres () {
    spheres[0] = Sphere(vec3(0,-1000,0), vec3(.6, .6, 1), 1000., 0., DIFF);
    spheres[1] = Sphere(vec3(0,1020,0), vec3(1, .6, 1), 1000., 0., DIFF);
    spheres[2] = Sphere(vec3(-1010,0,0), vec3(1, .6, .6), 1000., 0., DIFF);
    spheres[3] = Sphere(vec3(1010,0,0), vec3(.6, 1, .6), 1000., 0., DIFF);
    spheres[4] = Sphere(vec3(0,0,-1010), vec3(1., 1, .6), 1000., 0., DIFF);
    spheres[5] = Sphere(vec3(0,0,1010), vec3(.6, 1, 1), 1000., 1., DIFF);
    spheres[6] = Sphere(vec3(-4, 3, 4), vec3(1), 3., 1., REFL);
    spheres[7] = Sphere(vec3(4, 3, -1), vec3(1), 3., 1.5, REFR);
    spheres[8] = Sphere(vec3(0,-2,0), vec3(1), 3., 1.5, DIFF);
    spheres[9] = Sphere(vec3(0, 19, 0), vec3(1), 0.1, 0.5, EMIT);
}

float distID (vec3 p, out Sphere s) {
    float minDist = float(MAX_DIST);
    for (int i = 0; i < NUM_OBJECTS; i++) {
        float tD = length(p - spheres[i].pos) - spheres[i].r;
        if(tD < minDist){
            minDist = tD;
            s = spheres[i];
        }
    }
    
    return minDist;
}

float distWithout (vec3 p, Sphere s) {
    float minDist = float(MAX_DIST);
    for (int i = 0; i < NUM_OBJECTS; i++) {
        float tD = length(p - spheres[i].pos) - spheres[i].r;
        if(tD < minDist && spheres[i] != s){
            minDist = tD;
        }
    }
    
    return minDist;
}

float dist (vec3 p) {
    Sphere temp;
    return distID(p, temp);
}

vec3 normal(vec3 p){
  float d = dist(p);
  vec2 e = vec2(.01, 0);
  
  vec3 n = d - vec3(
    dist(p-e.xyy),
    dist(p-e.yxy),
    dist(p-e.yyx));
  
  return normalize(n);
}

float raycast(vec3 ro, vec3 rd){
    float dO = 0.;
    for(int i = 0; i < MAX_STEPS; i++){
        vec3 p = ro + rd*dO;
        float nd = dist(p);
        if(nd < float(SURF_DIST) || dO > float(MAX_DIST)) break;
        dO += nd;
    }
    return dO;
}

float diffuse(vec3 p ){
    int lightID = int(floor(rand()*float(NUM_EMITTER)));
    Sphere light;
    int counter = 0;
    for(int l = 0; l < NUM_OBJECTS; l++){
        if(spheres[l].mat == EMIT){
            if(counter == lightID){
                light = spheres[l];
                break;
            }
            counter++;
        }
    }
    
    vec3 point = light.pos + randsphere() * light.r;
    vec3 dir = normalize(point-p);
    vec3 n = normal(p);
    return clamp(dot(n, dir) * light.e, 0., 1.);
}

float shadow(vec3 p){
    int lightID = int(floor(rand()*float(NUM_EMITTER)));
    Sphere light;
    int counter = 0;
    for(int l = 0; l < NUM_OBJECTS; l++){
        if(spheres[l].mat == EMIT){
            if(counter == lightID){
                light = spheres[l];
                break;
            }
            counter++;
        }
    }
    vec3 point = light.pos + randsphere() * (light.r + SURF_DIST);
    
    p = p + normal(p) * SURF_DIST;
    vec3 rd = normalize(point-p);
    float di = distance(point, p) - SURF_DIST*2.;
    float dO = SURF_DIST;
    for(int i = 0; i < 80; i++){
        float d = distWithout(p + rd*dO, light);
        if(d < SURF_DIST || dO > di) break;
        dO += d;
    }
    return dO >= di ? 1.0 : 0.0;
}

vec3 color(vec3 p){
    Sphere s;
    distID(p, s);
    
    vec3 col = s.col;
    
    return col;
}

vec3 getMat(vec3 ro, vec3 rd){
    vec3 tcol = vec3(0);
    vec3 fcol = vec3(1.);
    
    for(int b = 0; b < BOUNCES; b++){
        float d = raycast(ro, rd);
        vec3 p = ro + rd*d;
        float dif = diffuse(p);
        vec3 n = normal(p);
        float s = shadow(p);
        
        Sphere sph;
        distID(p, sph);
        
        vec3 col = vec3(0.);
        
        if(sph.mat == DIFF){
            col = color(p);
            ro = p + n * SURF_DIST;
            rd = randhemisphere(n);
        }
        if(sph.mat == REFL) {
            if(rand() < sph.e){
                dif=0.;
                s=0.;
                col = color(p);
                ro = p + n * SURF_DIST;
                rd = reflect(rd,n);
            }
            else {
                col = color(p);
                ro = p + n * SURF_DIST;
                rd = randhemisphere(n);
            }
        }
        if(sph.mat == REFR){
            s   = 0.;
            dif = 0.;
            col = sph.col * 1.4; // Some bull crap number i procured
            
            vec3 trd = refract(normalize(rd), normalize(n), 1./sph.e);
            if(trd != vec3(0)){
                rd = trd;
                ro = p - n * SURF_DIST * 100.;
                float traveled = SURF_DIST;
                
                for(int i = 0; i < 500; i++) {
                    vec3 marchedPoint = ro + rd * traveled;
                    float d = abs(dist(marchedPoint));
                    if(d < SURF_DIST) break;
                    traveled+=d;
                }
                vec3 tempRo = ro;
                ro = ro + rd * (traveled + SURF_DIST * 3.);
                //rd = refract(rd, tempRo + rd * traveled, sph.e);
            }
            else{
                ro = p + n * SURF_DIST;
                rd = reflect(rd, n);
                
            }

        }
        if(sph.mat == EMIT){
            fcol *= color(p) * sph.e * 2.;
            tcol += fcol;
            break;
        }
        
        fcol *= col;
        tcol += fcol * (s * dif);
    }
    
    return tcol;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ){
    initspheres();
	vec2 uv = (fragCoord.xy-.5*iResolution) / iResolution.y;
	
	vec3 col = vec3(0);
	initrand(uv * (iTime + 1.) );
	for(int s = 0; s < SAMPLES; s++){
	    uv = ((fragCoord.xy-vec2(rand(),rand()))-.5*iResolution) / iResolution.y;
	    
	    vec3 rd = normalize(vec3(uv * fov, 1.));
	    vec3 ro = vec3(0, 0, -9.);
	
    	ro.yz *= rot(max(-iMouse2.y / 100., 0. ));
	    ro.xz *= rot(-iMouse2.x / 100.);
	    rd.yz *= rot(-iMouse2.y / 100.);
	    rd.xz *= rot(-iMouse2.x / 100.);
	    ro.y += 4.;
	
	    col += getMat(ro, rd);
	}
	
	col /= float(SAMPLES);
	
	fragColor = vec4(col, 1.0);
}
